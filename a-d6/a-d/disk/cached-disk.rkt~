#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                          Cached Disk                            *-*-
;-*-*                                                                 *-*-
;-*-*               Theo D'Hondt - Wolfgang De Meuter                 *-*-
;-*-*            1993 - 2010 Programming Technology Lab               *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (cached-disk)
 (export block-size disk-size
         block-pointer-size block-index-size real32 real64
         block? disk position 
         new mount unmount name disk-size
         read-block write-block!
         decode-byte encode-byte! 
         decode-fixed-natural encode-fixed-natural!
         decode-arbitrary-integer encode-arbitrary-integer! 
         integer-bytes natural-bytes
         decode-real encode-real! 
         decode-string encode-string!
         decode-bytes encode-bytes!
         )
 (import (rnrs base)
         (rnrs control)
         (rnrs mutable-pairs)
         (rnrs io simple)
         (a-d scheme-tools)
         (prefix (a-d disk disk) disk:))
 
 ;rename to their originals for transitive export (R6RS lib system sucks!)
 (define real32 disk:real32)
 (define real64 disk:real64)
 
 (define block-size disk:block-size)
 (define disk-size disk:disk-size)
 (define block-pointer-size disk:block-pointer-size)
 (define block-index-size disk:block-index-size)
 
 (define cache-size 10)
 
 (define (make-cache)
   (make-vector cache-size ()))
 
 (define (cache:get cche indx)
   (vector-ref cche indx))
 
 (define (cache:put! cche indx entry)
   (vector-set! cche indx entry))
 
 (define (cache:find-free-index cche)
   (define oldest-time (current-time))
   (define oldest-indx -1)
   (define (traverse indx)
     (if (< indx cache-size)
         (let 
             ((blck (cache:get cche indx)))
           (if (null? blck)
               indx
               (let ((lckd (locked? blck)))
                 (if (not lckd)
                     (let 
                         ((stmp (time-stamp blck)))
                       (when (time<? stmp oldest-time)
                         (set! oldest-time stmp)
                         (set! oldest-indx indx))))
                 (traverse (+ indx 1)))))
         (if (negative? oldest-indx)
             (error "cache full" cche)
             oldest-indx)))
   (traverse 0))
 
 (define (cache:find-block cche bptr)
   (define (position-matches? blck)
     (and (not (null? blck))
          (= (position blck) bptr)))
   (let traverse
     ((indx 0)
      (blck (cache:get cche 0)))
     (cond ((position-matches? blck)
            blck)
           ((< (+ indx 1) cache-size)
            (traverse (+ indx 1) 
                      (cache:get cche (+ indx 1))))
           (else
            ()))))
 
 (define disk-tag 'cached-disk)
 
 (define (make cche disk)
   (cons disk-tag (cons cche disk)))
 
 (define (cache:vector disk)
   (cadr disk))
 
 (define (cache:disk disk)
   (cddr disk))
 
 (define (new name)
   (make (make-cache) (disk:new name)))
 
 (define (mount name)
   (make (make-cache) (disk:new name)))
 
 (define (disk? any)
   (and (pair? any)
        (eq? (car any) disk-tag)))
 
 (define (name disk)
   (disk:name disk))
 
 (define (unmount disk) 
   (define vctr (cache:vector disk))
   (define (traverse indx)
     (if (< indx cache-size)
         (let ((blck (cache:get vctr indx)))
           (cond
             ((not (null? blck))
              (if (dirty? blck)
                  (disk:write-block! (block blck)))
              (invalidate! blck)))
           (traverse (+ indx 1)))))
   (traverse 0)
   (disk:unmount disk))
 
 (define (write-block! blck) 
   (define cche (cache:vector (disk blck)))
   (if (not (valid? blck))
       (error "invalidated block(write-block!)" blck))
   (locked! blck #f)) ; no write, that's the whole point!
 
 (define (read-block disk bptr)
   (define cche (cache:vector disk))
   (define blck (cache:find-block cche bptr))
   (if (null? blck)
       (let*
           ((indx (cache:find-free-index cche))
            (blck (cache:get cche indx)))
         (when (not (null? blck))
           (if (dirty? blck)
               (disk:write-block! (block blck)))
           (invalidate! blck))
         (set! blck (make-block disk (disk:read-block (cache:disk disk) bptr)))
         (cache:put! cche indx blck)))
   (locked! blck #t)
   blck)
 
 (define block-tag 'cached-block)
 
 (define (make-block disk blck)
   (cons block-tag (cons #f (cons #t (cons (current-time) (cons disk blck)))))) ; dirty = false; locked = true
 
 (define (block? any)
   (and (pair? any)
        (eq? (car any) block-tag)))
 
 (define (dirty? blck)
   (cadr blck))
 
 (define (dirty! blck)
   (set-car! (cdr blck) #t))
 
 (define (locked? blck)
   (caddr blck))
 
 (define (locked! blck lckd)
   (set-car! (cddr blck) lckd))
 
 (define (time-stamp blck)
   (cadddr blck))
 
 (define (time-stamp! blck time)
   (set-car! (cdddr blck) time))
 
 (define (disk blck)
   (cadddr (cdr blck)))
 
 (define (block blck)
   (cddddr (cdr blck)))
 
 (define (invalidate! blck)
   (set-cdr! (cdddr blck) '()))
 
 (define (valid? blck)
   (not (null? (block blck))))
 
 (define (position blck) 
   (if (not (valid? blck))
       (error "invalidated cblock(position)" blck))
   (disk:position (block blck)))
 
 (define integer-bytes disk:integer-bytes)
 
 (define natural-bytes disk:natural-bytes)
 
 (define (make-cached-encoder proc)
   (lambda args
     (define blck (car args))
     (if (not (valid? blck))
         (error "invalidated cblock(cached version of encoder)" blck))
     (time-stamp! blck (current-time))
     (dirty! blck)
     (apply proc (cons (block blck)  (cdr args)))))
 
 (define encode-byte! (make-cached-encoder disk:encode-byte!))
 (define encode-fixed-natural! (make-cached-encoder disk:encode-fixed-natural!))
 (define encode-arbitrary-integer! (make-cached-encoder disk:encode-arbitrary-integer!))
 (define encode-real! (make-cached-encoder disk:encode-real!))
 (define encode-string! (make-cached-encoder disk:encode-string!))
 (define encode-bytes! (make-cached-encoder disk:encode-bytes!))
 
 (define (make-cached-decoder proc)
   (lambda args
     (define blck (car args))
     (if (not (valid? blck))
         (error "invalidated cblock(cached version of decoder)" blck))
     (time-stamp! blck (current-time))
     (apply proc (cons (block blck)  (cdr args)))))
 
 (define decode-byte (make-cached-decoder disk:decode-byte))
 (define decode-fixed-natural (make-cached-decoder disk:decode-fixed-natural))
 (define decode-arbitrary-integer (make-cached-decoder disk:decode-arbitrary-integer))
 (define decode-real (make-cached-decoder disk:decode-real))
 (define decode-string (make-cached-decoder disk:decode-string))
 (define decode-bytes (make-cached-decoder disk:decode-bytes)))
